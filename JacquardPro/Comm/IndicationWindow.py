# -*- coding=utf-8 -*-from IndicationWindowui import Ui_Dialogfrom PyQt4 import QtGui, QtCoreimport osfrom Comm.picture import Picturesfrom FixtureControl import APPConfigparseclass IndicationWindow(Ui_Dialog):    # 超时时间,单位秒    WAIT_TIME_OUT = 10    def __init__(self,timer=True, parent=None,):        super(IndicationWindow, self).__init__(parent)        self.apptimer = QtCore.QTimer()        self.apptimer.timeout.connect(self._timer_out)        if timer:            self.apptimer.start(1000)        self._timeout = IndicationWindow.WAIT_TIME_OUT        Pictures.getpicture(os.getcwd() + "\\resource")    # 设置计时器使用状态    def setTimer(self, on):        if on:            self.apptimer.start(1000)        else:            self.apptimer.stop()        # 间隔时间到    def _timer_out(self):        self._timeout -= 1        self.lab_img.setText('time({0}s)'.format(self._timeout))        # 时间到，失败错误退出        if self._timeout == 0:            # self.reject()            # self.apptimer.stop()            self.accept()    # 按键释放信号    def keyReleaseEvent(self, *args, **kwargs):        # print args, kwargs        event = args[0]        if isinstance(event, QtGui.QKeyEvent):            # print 'current=', event.key()            # if event.key() == QtCore.Qt.Key_Return:            #     self._result_ok()            if event.key() == QtCore.Qt.Key_Right:                self.btn_fail.setFocus()            elif event.key() == QtCore.Qt.Key_Left:                self.btn_ok.setFocus()            elif event.key() == QtCore.Qt.Key_N:                self._result_fail()            elif event.key() == QtCore.Qt.Key_Y:                self._result_ok()    # 设置显示图片    def setimg(self, img):        # 限制高度        self.lab_img.setFixedHeight(400)        self.lab_img.setScaledContents(True)  # 让图片自适应label大小       #  if img is None:       #      # for i in range(len(l)):       #      #     if l[i].split('\\')[len(l[i].split('\\')) - 1] == "no_img.jpg":       #      #         img = l[i]       #      #img = self.pic.no_imgfilename       #      pass       #  if isinstance(img, QtGui.QPixmap):       #      self.lab_img.setPixmap(img)       #  else:       #      if os.path.exists(img):       #          img = QtGui.QPixmap(img)       #       #          self.lab_img.setPixmap(img)       #      else:       #          # for i in range(len(l)):       #              # if l[i].split('\\')[len(l[i].split('\\')) - 1] == "no_img.jpg":       #              #     img = QtGui.QPixmap(l[i])       #          img = QtGui.QPixmap(self.pic.no_imgfilename)       #          self.lab_img.setPixmap(img)       # # print self.lab_img.height(), self.lab_img.width()    # 左侧显示信息    def set_display(self, info):        self.txt_msg.append(info)if __name__ == '__main__':    import sys    app = QtGui.QApplication(sys.argv)    trans = IndicationWindow(timer=True)    trans.setimg(None)    trans.show()    sys.exit(app.exec_())